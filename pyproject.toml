[build-system]
requires = ["setuptools>=75.0.0", "wheel>=0.42.0", "build>=1.0.3"]
build-backend = "setuptools.build_meta"

[project]
name = "wifite3"
version = "3.13.5"
description = "Wireless Network Auditor for Linux - Python 3.13.5 Edition"
readme = "README.md"
license = {text = "GNU GPLv2"}
authors = [
    {name = "joseguzman1337", email = ""},
]
maintainers = [
    {name = "joseguzman1337", email = ""},
]
keywords = [
    "wifi", "wireless", "security", "pentesting", "aircrack", "wpa", "wep", 
    "wps", "pmkid", "handshake", "cracking", "networking", "cybersecurity"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: System :: Networking",
    "Topic :: Security",
    "Topic :: System :: Systems Administration",
    "Natural Language :: English",
]
requires-python = ">=3.13.0"
dependencies = [
    "cryptography>=42.0.0",
    "requests>=2.31.0",
    "setuptools>=75.0.0",
    "wheel>=0.42.0",
]

[project.urls]
Homepage = "https://github.com/joseguzman1337/wifite3"
Repository = "https://github.com/joseguzman1337/wifite3"
Issues = "https://github.com/joseguzman1337/wifite3/issues"
Documentation = "https://github.com/joseguzman1337/wifite3/wiki"

[project.scripts]
wifite = "wifite.__main__:main"
wifite3 = "wifite.__main__:main"

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.12.0",
    "ruff>=0.1.9",
    "mypy>=1.8.0",
    "types-requests>=2.31.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "pre-commit>=3.6.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "coverage>=7.4.0",
]

[tool.setuptools.packages.find]
include = ["wifite*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
wifite = ["*.txt"]

[tool.black]
line-length = 77
target-version = ["py313"]
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
    | \.mypy_cache
    | \.pytest_cache
    | \.ruff_cache
    | \.venv
    | _build
    | buck-out
    | build
    | dist
)/
'''

[tool.ruff]
target-version = "py313"
line-length = 77
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "N",   # pep8-naming
    "D",   # pydocstyle
    "UP",  # pyupgrade
    "S",   # bandit
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
    "ERA", # eradicate
]
ignore = [
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D203", # 1 blank line required before class docstring
    "D213", # Multi-line docstring summary should start at the second line
    "S101", # Use of assert detected
    "S603", # subprocess call - check for execution of untrusted input
    "S607", # Starting a process with a partial executable path
]

[tool.ruff.per-file-ignores]
"tests/*" = ["D", "S"]
"setup.py" = ["D"]

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["wifite"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "test"]
skips = ["B101", "B603", "B607"]
